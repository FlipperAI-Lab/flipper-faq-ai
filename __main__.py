import os
import re
import json
import asyncio
import time
import numpy as np

from pathlib import Path
from functools import lru_cache
from sentence_transformers import SentenceTransformer, util

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineQuery, InlineQueryResultArticle,
    InputTextMessageContent, InlineKeyboardButton,
    InlineKeyboardMarkup, Message )
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import TOKEN

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'  # –û—Ç–∫–ª—é—á–∞–µ–º oneDNN –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'   # –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ TensorFlow

class FAQ_flipper_Bot:
    def __init__(self, faq_dir="faq"):
        self.model = None
        self.faq = {}
        self.embeddings_cache = {}
        self.faq_dir = faq_dir
        
        self.load_faq()
        self.load_model()
        self.prepare_embeddings()
    
    def load_faq(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ FAQ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        faq_path = Path(self.faq_dir)
        if not faq_path.exists() or not faq_path.is_dir():
            raise SystemExit(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.faq_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ FAQ –∏–∑ {self.faq_dir}...")
        for file_path in faq_path.glob("*.json"):
            category = file_path.stem
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    self.faq[category] = json.load(f)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {category} ( {len(self.faq[category]['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤)")
            except (json.JSONDecodeError, KeyError) as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {str(e)}")
        
        if not self.faq:
            raise SystemExit("–ù–µ—Ç FAQ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!")
        
        print(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.faq)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π FAQ")
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ"""
        if self.model is None:
            self.model = SentenceTransformer(
                "sentence-transformers/all-MiniLM-L12-v2", 
                device="cpu"
            )
    
    def prepare_embeddings(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è FAQ"""
        for category, data in self.faq.items():
            questions = data["questions"]
            if questions:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤
                self.embeddings_cache[category] = self.model.encode(
                    questions, 
                    convert_to_numpy=True,
                    show_progress_bar=False
                )
    
    @lru_cache(maxsize=200)
    def get_query_embedding(self, text: str) -> np.ndarray:
        """–ö—ç—à–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return self.model.encode([text])[0]
    
    def is_triggered(self, question: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤"""
        question_lower = question.lower()
        return any(
            trigger in question_lower
            for data in self.faq.values()
            for trigger in data["triggers"]
        )
    
    def find_best_match(self, question: str, threshold: float = 0.65) -> str:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        if not self.is_triggered(question):
            return None
            
        start_time = time.time()
        query_embed = self.get_query_embedding(question)
        best_match = None
        best_score = threshold
        
        for category, emb in self.embeddings_cache.items():
            scores = util.cos_sim(query_embed, emb)[0]
            max_score = max(scores).item()
            if max_score > best_score:
                best_score = max_score
                best_match = self.faq[category]["answer"]
        
        print(f"–ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª: {time.time()-start_time:.3f} —Å–µ–∫—É–Ω–¥ | –°—Ö–æ–¥—Å—Ç–≤–æ: {best_score:.2f}")
        return best_match
    
    def clean_question(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        text = re.sub(r"[^\w\s]", "", text)  # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        text = re.sub(r"\s+", " ", text).strip().lower()  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
        return text

faq_bot = FAQ_flipper_Bot(faq_dir="faq")
bot = Bot(
        token=TOKEN,
        default=DefaultBotProperties(
            link_preview_is_disabled=True,
            parse_mode=ParseMode.HTML
            )
        )
dp = Dispatcher()

@dp.message(CommandStart())
async def start_command(message: Message):
    msg = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –±–æ—Ç‚Äì–Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Ç–≤–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–≤–æ–¥—É <b>Flipper Zero</b>.
<i>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–¥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å</i>.
    """
    await message.answer(
        text=msg,
        reply_markup=
            InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                        switch_inline_query_current_chat=''
                    )
                ]]
            )
        )

@dp.message(Command("info"))
async def info_command(message: Message):
    await message.answer(text="–∏–Ω—Ñ–æ")

@dp.inline_query()
async def handle_inline_query(inline_query: InlineQuery):
    query = inline_query.query.strip()
    if not query:
        return
    
    # –û—á–∏—â–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    cleaned_query = faq_bot.clean_question(query)
    answer = faq_bot.find_best_match(cleaned_query)
    
    results = []
    if answer:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        item = InlineQueryResultArticle(
            id="1",
            title="‚úÖ –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω!",
            input_message_content=InputTextMessageContent(
                message_text=answer
            ),
            description=answer[:100] + "..." if len(answer) > 100 else answer
        )
        results.append(item)
    else:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        item = InlineQueryResultArticle(
            id="1",
            title="‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            input_message_content=InputTextMessageContent(
                message_text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
            ),
            description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å"
        )
        results.append(item)
    
    await inline_query.answer(results, is_personal=True, cache_time=1)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())